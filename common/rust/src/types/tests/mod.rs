use crate::types::ws::websocket::BasePacket;

use super::ws::websocket::WebsocketPacket;
use serde_json::Value;
use std::{collections::HashMap, fs};

#[test]
pub fn gateway_payload_deserialize_from_nova_gateway_tests_generator() {
    let paths = fs::read_dir("./external/discord_gateway_tests_generator").unwrap();
    let mut test_cases: HashMap<String, Vec<Value>> = HashMap::new();

    // for all the tests generated by the test generator (scraping the gateway)
    // we get deserialize it and test it!
    for p in paths {
        let path = p.unwrap().path();
        let contents = fs::read_to_string(path.clone()).unwrap();
        let val = serde_json::from_str(&contents).unwrap();
        test_cases.insert(path.to_str().unwrap().to_string(), val);
    }
    let mut failures: Vec<String> = vec![];

    for cases in test_cases {
        let mut i = 0;
        for test in cases.1 {
            let raw = serde_json::from_value::<BasePacket>(test).unwrap();
            let result: Result<WebsocketPacket, serde_json::Error> = raw.into();
            
            if !result.is_ok() {
                failures.push(format!(
                    "Failed test {} on index {}: {}",
                    cases.0,
                    i,
                    result.unwrap_err()
                ))
            };
            i += 1;
        }
    }

    if failures.len() != 0 {
        assert!(false, "Failure on {} tests! logs: \n{}", failures.len(), failures.join("\n"));
    }
}
