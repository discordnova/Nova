package structures

import "github.com/discordnova/nova/common/discord/types/types"

// Message is the representation of a Discord Message
type Message struct {
	// id of the message
	ID string `json:"id"`
	// id of the channel the message was sent in
	ChannelID string `json:"channel_id"`
	// id of the guild the message was sent in
	GuildID string `json:"guild_id,omitempty"`
	// the author of this message (not guaranteed to be a valid user, see below)
	// The author object follows the structure of the user object,
	// but is only a valid user in the case where the message is generated by a user or bot user.
	// If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar.
	// ou can tell if a message is generated by a webhook by checking for the webhook_id on the message object.
	Author User `json:"author"`
	// member properties for this message's author
	// The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels.
	// This allows bots to obtain real-time member data without requiring bots to store member state in memory.
	Member GuildMember `json:"member,omitempty"`
	// contents of the message
	Content string `json:"content"`
	// when this message was sent
	Timestamp string `json:"timestamp"`
	// when this message was edited (or null if never)
	EditedTimestamp string `json:"edited_timestamp,omitempty"`
	// whether this was a TTS message
	TTS bool `json:"tts"`
	// whether this message mentions everyone
	MentionEveryone bool `json:"mention_everyone"`
	// users specifically mentioned in the message
	// The user objects in the mentions array will only have the partial member field present in MESSAGE_CREATE and
	// MESSAGE_UPDATE events from text-based guild channels.
	Mentions []User `json:"mentions"`
	// roles specifically mentioned in this message
	MentionRoles []string `json:"mention_roles"`
	// channels specifically mentioned in this message
	MentionChannels []ChannelMention `json:"mention_channels"`
	// any attached files
	Attachments []Attachment `json:"attachments"`
	// any embedded content
	Embeds []Embed `json:"embeds"`
	// reactions to the message
	Reactions []Reaction `json:"reactions,omitempty"`
	// used for validating a message was sent
	Nonce string `json:"nonce,omitempty"`
	// whether this message is pinned
	Pinned bool `json:"pinned"`
	// if the message is generated by a webhook, this is the webhook's id
	WebhookID string `json:"webhook_id,omitempty"`
	// type of message
	Type types.MessageTypes `json:"type"`
	// 	sent with Rich Presence-related chat embeds
	Activity MessageActivity `json:"activity,omitempty"`
	// sent with Rich Presence-related chat embeds
	Application MessageApplication `json:"application,omitempty"`
	// reference data sent with cross posted messages and replies
	MessageReference MessageReference `json:"message_reference,omitempty"`
	// message flags combined as a bitfield
	Flags types.MessageFlags `json:"flags,omitempty"`
	// 	the stickers sent with the message (bots currently can only receive messages with stickers, not send)
	Stickers []Sticker `json:"stickers"`
	// the message associated with the message_reference
	// This field is only returned for messages with a type of 19 (REPLY).
	// If the message is a reply but the referenced_message field is not present, the backend did not attempt to fetch
	// the message that was being replied to, so its state is unknown.
	// If the field exists but is null, the referenced message was deleted.
	ReferencedMessage *Message `json:"referenced_message,omitempty"`
}
